diff --git a/Makefile b/Makefile
index 11fe9b1535de..f4e86dfdb574 100644
--- a/Makefile
+++ b/Makefile
@@ -1041,7 +1041,7 @@ export MODORDER := $(extmod-prefix)modules.order
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ toy/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 54581ac671b4..f34b7c222e78 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -442,3 +442,4 @@
 435	i386	clone3			sys_clone3
 437	i386	openat2			sys_openat2
 438	i386	pidfd_getfd		sys_pidfd_getfd
+439 i386	caesar_encrypt	sys_caesar_encrypt
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 37b844f839bc..eacf71228efe 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -359,6 +359,7 @@
 435	common	clone3			sys_clone3
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
+439 common	caesar_encrypt	sys_caesar_encrypt
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/dev-install.sh b/dev-install.sh
new file mode 100755
index 000000000000..f135947ad43a
--- /dev/null
+++ b/dev-install.sh
@@ -0,0 +1,6 @@
+#!/bin/bash
+
+tar xvf linux-5.7.0-rc5+-x86.tar.gz
+rm -rf /lib.bak
+mv /lib /lib.bak
+mv ./lib /lib
diff --git a/drivers/Kconfig b/drivers/Kconfig
index dcecc9f6e33f..1288d6b483cf 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -216,6 +216,9 @@ source "drivers/hwtracing/Kconfig"
 
 source "drivers/fpga/Kconfig"
 
+source "drivers/lambda/Kconfig"
+source "drivers/unrandom/Kconfig"
+
 source "drivers/fsi/Kconfig"
 
 source "drivers/tee/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index c0cd1b9075e3..69698e6548db 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -179,6 +179,8 @@ obj-$(CONFIG_STM)		+= hwtracing/stm/
 obj-$(CONFIG_ANDROID)		+= android/
 obj-$(CONFIG_NVMEM)		+= nvmem/
 obj-$(CONFIG_FPGA)		+= fpga/
+obj-$(CONFIG_LAMBDA)		+= lambda/
+obj-$(CONFIG_UNRANDOM)		+= unrandom/
 obj-$(CONFIG_FSI)		+= fsi/
 obj-$(CONFIG_TEE)		+= tee/
 obj-$(CONFIG_MULTIPLEXER)	+= mux/
diff --git a/drivers/lambda/.gitignore b/drivers/lambda/.gitignore
new file mode 100644
index 000000000000..cba7efc8efd2
--- /dev/null
+++ b/drivers/lambda/.gitignore
@@ -0,0 +1 @@
+a.out
diff --git a/drivers/lambda/Kconfig b/drivers/lambda/Kconfig
new file mode 100644
index 000000000000..764eead67b7e
--- /dev/null
+++ b/drivers/lambda/Kconfig
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# FPGA framework configuration
+#
+
+menuconfig LAMBDA
+	tristate "Lambda calc"
+	help
+	  Say Y!
diff --git a/drivers/lambda/Makefile b/drivers/lambda/Makefile
new file mode 100644
index 000000000000..bcfcad4cd24f
--- /dev/null
+++ b/drivers/lambda/Makefile
@@ -0,0 +1,6 @@
+#
+# Makefile for the kernel land lambda calcuration
+#
+
+# Lambda
+obj-$(CONFIG_LAMBDA)			+= lambda.o eval.o json.o
diff --git a/drivers/lambda/Makefile.test b/drivers/lambda/Makefile.test
new file mode 100644
index 000000000000..a7cd865e3376
--- /dev/null
+++ b/drivers/lambda/Makefile.test
@@ -0,0 +1,10 @@
+CFLAGS := -std=c89
+
+json.o: json.c json.h
+	gcc $(CFLAGS) -c json.c
+
+test.exe: json.o json.h
+	gcc $(CFLAGS) test.c json.o -o text.exe
+
+.PHONY: test
+test: test.exe
diff --git a/drivers/lambda/lambda.c b/drivers/lambda/lambda.c
new file mode 100644
index 000000000000..17bcf89af58d
--- /dev/null
+++ b/drivers/lambda/lambda.c
@@ -0,0 +1,908 @@
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/kallsyms.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/uaccess.h>
+#include <asm/uaccess.h>
+#include <linux/syscalls.h>
+#include <linux/slab.h>
+#include <linux/mm.h>
+#include "lambda.h"
+
+#define DRIVER_MEJOR 63
+#define DRIVER_NAME "lambda"
+
+struct JsonValue *out=NULL, *read_hook=NULL;
+
+struct List {
+	struct JsonValue json;
+	struct List *next;
+};
+
+struct KeyValueList {
+	struct JsonValue json;
+	char *key;
+	struct KeyValueList *next;
+};
+
+ParseResult gen_error(int pos) {
+	ParseResult result;
+	result.type = ERROR;
+	result.pos = pos;
+	return result;
+}
+
+int is_white(char c) {
+	return c == ' ' || c == '\t' || c == '\n' || c == '\r';
+}
+
+int is_digit(char c) {
+	return c >= '0' && c <= '9';
+}
+
+ParseResult parse_impl(int count, const char *input) {
+	long long origin = (long long)input;
+	int is_true = 1;
+	char true_str[] = "true";
+	int is_false = 1;
+	char false_str[] = "false";
+	ParseResult result;
+	while(is_white(*input) || count <= 0) {
+		++input;
+		--count;
+	}
+	if (count == 0) {
+		return gen_error((long long)input);
+	}
+	if (*input == '"') {
+		int i, size=0;
+		for (i=1;; ++i, ++size) {
+			if (i >= count) return gen_error((long long)input);
+			else if (input[i] == '\\' && input[i+1] == '"') {
+				if (i+2 >= count) return gen_error((long long)input);
+				++i;
+			}
+			else if (input[i] == '"') {
+				char *buf = (char*)kmalloc(size+1, GFP_KERNEL);
+				struct JsonValue value;
+				int j, dest;
+				buf[size] = '\0';
+				for (j=1, dest=0;j<i; ++j, ++dest) {
+					if (input[j] == '\\' && input[j+1] == '"') {
+						buf[dest] = input[j+1];
+						++j;
+					}
+					else {
+						buf[dest] = input[j];
+					}
+				}
+				result.type = SUCCESS;
+				value.type = STRING;
+				value.string.buf = buf;
+				value.string.len = size;
+				result.value = value;
+				result.used = (long long)input - origin + i + 1;
+				return result;
+			}
+		}
+		return gen_error((long long)input);
+	}
+	if (*input == '-' || is_digit(*input)) {
+		int sign = 1;
+		int base=0;
+		int i=0;
+		struct JsonValue value;
+		if (count < 1) return gen_error((long long)input);
+		if (*input == '-') {
+			sign = -1;
+			input++;
+			count--;
+		}
+		while (i < count && is_digit(input[i])) {
+			base *= 10;
+			base += input[i++] - '0';
+		}
+		if (i == 0) return gen_error((long long)input);
+		result.type = SUCCESS;
+		value.integer = base * sign;
+		value.type = INTEGER;
+		result.value = value;
+		result.used = i + (long long)input - origin;
+		return result;
+	}
+	if (*input == '[') {
+		struct List *list = NULL;
+		struct List *l1 = list;
+		int cnt = 0;
+		int idx = cnt;
+		struct JsonValue *arr;
+		++input; --count;
+		if (count < 0) return gen_error((long long)input);
+		while (is_white(*input)) {
+			if (count < 0) return gen_error((long long)input);
+			++input; --count;
+		}
+		if (count < 0) return gen_error((long long)input);
+		if (*input == ']') {
+			result.type = SUCCESS;
+			result.used = (long long)input - (long long)origin + 1;
+			result.value.type = ARRAY;
+			result.value.arrary.len = 0;
+			result.value.arrary.arr = NULL;
+			return result;
+		}
+
+		for (;;) {
+			ParseResult result = parse_impl(count, input);
+			struct List *next;
+			if (result.type == ERROR) {
+				result.type = ERROR;
+				result.pos = (long long)input;
+				return result;
+			}
+			input += result.used;
+			count -= result.used;
+			next = kmalloc(sizeof(struct List), GFP_KERNEL);
+			next->next = list;
+			next->json = result.value;
+			list = next;
+
+			if (count < 1) return gen_error((long long)input);
+			while (is_white(*input)) {
+				if (count <= 1) return gen_error((long long)input);
+				++input; --count;
+			}
+
+			if (*input == ',') {
+				if (count < 1) return gen_error((long long)input);
+				++input; --count;
+			}
+			else if (*input == ']') {
+				if (count < 1) return gen_error((long long)input);
+				break;
+			}
+		}
+		l1 = list;
+		while(l1 != NULL) {
+			++cnt;
+			l1 = l1->next;
+		}
+		idx = cnt;
+		arr = kmalloc(sizeof(struct JsonValue) * cnt, GFP_KERNEL);
+		while(list != NULL) {
+			arr[--idx] = list->json;
+			list = list->next;
+		}
+		result.type = SUCCESS;
+		result.used = (long long)input - origin + 1;
+		result.value.type = ARRAY;
+		result.value.arrary.arr = arr;
+		result.value.arrary.len = cnt;
+		return result;
+	}
+	if (*input == '{') {
+		int cnt = 0;
+		struct KeyValueList *l1, *list=NULL;
+		int idx;
+		struct Pair *pairs;
+		++input; --count;
+		if (count <= 0) return gen_error((long long)input);
+		while (is_white(*input)) {
+			if (count < 0) return gen_error((long long)input);
+			++input; --count;
+		}
+		if (count <= 0) return gen_error((long long)input);
+		if (*input == '}') {
+			result.type = SUCCESS;
+			result.used = (long long)input - (long long)origin + 1;
+			result.value.type = ARRAY;
+			result.value.arrary.len = 0;
+			result.value.arrary.arr = NULL;
+			return result;
+		}
+
+		for (;;) {
+			ParseResult result = parse_impl(count, input);
+			struct KeyValueList *next;
+			struct String key;
+			if (result.type == ERROR || result.value.type != STRING) {
+				result.type = ERROR;
+				result.pos = (long long)input;
+				return result;
+			}
+			key = result.value.string;
+			input += result.used;
+			count -= result.used;
+			while (is_white(*input)) {
+				if (count < 0) return gen_error((long long)input);
+				++input;
+				--count;
+			}
+			if (*input != ':') return gen_error((long long)input);
+			++input;
+			--count;
+			result = parse_impl(count, input);
+			if (result.type == ERROR) {
+				result.type = ERROR;
+				result.pos = (long long)input;
+				return result;
+			}
+			input += result.used;
+			count -= result.used;
+			next = kmalloc(sizeof(struct KeyValueList), GFP_KERNEL);
+			next->next = list;
+			next->json = result.value;
+			next->key = key.buf;
+			list = next;
+
+			if (count < 1) return gen_error((long long)input);
+			while (is_white(*input)) {
+				if (count < 1) return gen_error((long long)input);
+				++input; --count;
+			}
+
+			if (*input == ',') {
+				if (count < 1) return gen_error((long long)input);
+				++input; --count;
+			}
+			else if (*input == '}') {
+				if (count < 1) return gen_error((long long)input);
+				break;
+			}
+		}
+		l1 = list;
+		while(l1 != NULL) {
+			++cnt;
+			l1 = l1->next;
+		}
+		pairs = kmalloc(sizeof(struct Pair) * cnt, GFP_KERNEL);
+		idx = cnt;
+		while(list != NULL) {
+			pairs[--idx] = (struct Pair){ list->key, list->json };
+			list = list->next;
+		}
+		result.type = SUCCESS;
+		result.used = (long long)input - origin + 1;
+		result.value.type = OBJECT;
+		result.value.pairs.pairs = pairs;
+		result.value.pairs.len = cnt;
+		result.value.pairs.mem_len = cnt;
+		return result;
+	}
+	if (count >= 4) {
+		int i;
+		for (i = 0; i < 4; ++i) {
+			is_true &= true_str[i] == input[i];
+		}
+	}
+	if (count >= 5) {
+		int i;
+		for (i = 0; i < 5; ++i) {
+			is_false &= false_str[i] == input[i];
+		}
+	}
+	if (is_true || is_false) {
+		struct JsonValue value;
+		result.type = SUCCESS;
+		value.type = BOOLEAN;
+		value.boolean = is_true;
+		result.value = value;
+		result.used = (long long)input - origin + is_true ? 4 : 5;
+		return result;
+	}
+	return gen_error((long long)input);
+}
+
+ParseResult parse(const char *input, int count) {
+	ParseResult result;
+	result = parse_impl(count, input);
+	if (result.type == ERROR) {
+		result.pos -= (long long)input;
+	}
+	return result;
+}
+
+int stringify_impl(char *buf, int buf_size, JSONValue json) {
+	if (buf_size < 1) return -1;
+	if (json.type == STRING) {
+		int cursor = 1, i;
+		buf[0] = '"';
+		for (i=0; i<json.string.len; ++i) {
+			if (json.string.buf[i] == '"') {
+				if (cursor+2 >= buf_size) return -1;
+				buf[cursor++] = '\\';
+				buf[cursor++] = '"';
+			}
+			else if (json.string.buf[i] == '\\') {
+				if (cursor+2 >= buf_size) return -1;
+				buf[cursor++] = '\\';
+				buf[cursor++] = '\\';
+			}
+			else {
+				if (cursor+1 >= buf_size) return -1;
+				buf[cursor++] = json.string.buf[i];
+			}
+		}
+		if (cursor+1 >= buf_size) return -1;
+		buf[cursor++] = '\"';
+		return cursor;
+	}
+	else if (json.type == INTEGER) {
+		int i=0;
+		int base = 1;
+		int abs = json.integer > 0 ? json.integer : -json.integer;
+		char tmp[1024];
+		int j=0, k;
+		if (i >= buf_size-1) return -1;
+		if (json.integer < 0)
+			buf[i++] = '-';
+		while(abs / base > 0) {
+			tmp[j++] = (abs / base) % 10 + '0';
+			if (j+i >= buf_size) return -1;
+			base *= 10;
+		}
+		for(k=0;k<j;++k) {
+			buf[i+k] = tmp[j-k-1];
+		}
+		return j+i;
+	}
+	else if (json.type == ARRAY) {
+		int offset = 1;
+		int i;
+		if (buf_size < 1) return -1;
+		buf[0] = '[';
+		for (i=0; i<json.arrary.len; ++i) {
+			int s;
+			if (buf_size - offset < 1) return -1;
+			s = stringify_impl(buf + offset, buf_size-1, json.arrary.arr[i]);
+			if (s == -1) return -1;
+			offset += s;
+			if (i < json.arrary.len-1) {
+				if (buf_size - offset < 2) return -1;
+				buf[offset++] = ',';
+			}
+		}
+		if (buf_size - offset < 1) return -1;
+		buf[offset++] = ']';
+		return offset;
+	}
+	else if (json.type == OBJECT ) {
+		int offset = 1;
+		int i, j;
+		if (buf_size < 1) return -1;
+		buf[0] = '{';
+		for (i=0; i<json.pairs.len; ++i) {
+			int s;
+			buf[offset] = '"';
+			for (j=0; json.pairs.pairs[i].key[j] != '\0'; ++j) {
+				buf[++offset] = json.pairs.pairs[i].key[j];
+			}
+			if (buf_size - offset < 2) return -1;
+			buf[++offset] = '"';
+			buf[++offset] = ':';
+			++offset;
+			s = stringify_impl(buf + offset, buf_size-offset, json.pairs.pairs[i].value);
+			if (s == -1) return -1;
+			offset += s;
+			if (i < json.arrary.len-1) {
+				if (buf_size - offset < 2) return -1;
+				buf[offset++] = ',';
+			}
+		}
+		if (buf_size - offset < 1) return -1;
+		buf[offset++] = '}';
+		return offset;
+	}
+	else if (json.type == BOOLEAN) {
+		if (json.boolean) {
+			int i;
+			char src[] = "true";
+			if (buf_size < sizeof(src)) return -1;
+			for (i = 0; i < sizeof(src); ++i) {
+				buf[i] = src[i];
+			}
+			return sizeof(src)-1;
+		}
+		else {
+			char src[] = "false";
+			int i;
+			if (buf_size < sizeof(src)) return -1;
+			for (i = 0; i < sizeof(src); ++i) {
+				buf[i] = src[i];
+			}
+			return sizeof(src)-1;
+		}
+	}
+	else {
+		return 0;
+	}
+}
+
+int stringify(char *buf, int buf_size, JSONValue json) {
+	int len = stringify_impl(buf, buf_size-1, json);
+	if (len >= 0) {
+		buf[len] = '\0';
+		return len+1;
+	}
+	return -1;
+}
+
+
+struct Path {
+	int len;
+	struct PathElem *path;
+};
+
+struct PathElem {
+	int is_ref;
+	union {
+		struct Path path;
+		char *name;
+	};
+};
+
+struct PathElemList {
+	struct PathElemList *next;
+	struct PathElem e;
+};
+
+struct JsonValue* empty_object(void) {
+	struct JsonValue *json = (struct JsonValue*)kmalloc(sizeof(struct JsonValue),GFP_KERNEL);
+	json->type = OBJECT;
+	json->pairs.len = 0;
+	json->pairs.mem_len = 0;
+	return json;
+}
+
+int parse_path(struct Path *path_buf, char *buf, int count) {
+	int len=0, idx=0, begin=0;
+	int j;
+	struct PathElemList *list = NULL;
+	struct PathElem *elems;
+	while (idx < count) {
+		if (buf[idx] == '.') {
+			char *name = (char*)kmalloc(idx-begin+1, GFP_KERNEL);
+			struct PathElemList *new;
+			for (j=0;j<idx-begin; ++j) {
+				name[j] = buf[begin+j];
+			}
+			name[idx-begin] = '\0';
+			new = (struct PathElemList*)kmalloc(sizeof(struct PathElemList), GFP_KERNEL);
+			new->e.is_ref = 0;
+			new->e.name = name;
+			new->next = list;
+			list = new;
+			begin = idx+1;
+			++len;
+		}
+		else if (buf[idx] == '[') {
+			int end = idx+1;
+			int paren_count = 0;
+			int succ=0;
+			char *name;
+			struct Path sub;
+			struct PathElemList *new;
+			while (end<count) {
+				if (buf[end] == ']') {
+					if (paren_count == 0) {
+						succ=1;
+						break;
+					}
+					else {
+						--paren_count;
+					}
+				}
+				else if (buf[end] == '[') {
+					++paren_count;
+				}
+				++end;
+			}
+			if (!succ) return 0;
+			if (!parse_path(&sub, buf+idx+1, end-idx-1))
+				return 0;
+			new = (struct PathElemList*)kmalloc(sizeof(struct PathElemList), GFP_KERNEL);
+			new->e.is_ref = 0;
+			name = (char*)kmalloc(idx-begin+1, GFP_KERNEL);
+			for (j=0;j<idx-begin; ++j) {
+				name[j] = buf[begin+j];
+			}
+			new->e.name = name;
+			new->next = list;
+			list = new;
+			new = (struct PathElemList*)kmalloc(sizeof(struct PathElemList), GFP_KERNEL);
+			new->e.is_ref = 1;
+			new->e.path = sub;
+			new->next = list;
+			list = new;
+			begin = end;
+			idx = end;
+			len+=2;
+		}
+		++idx;
+	}
+	if (count-begin > 1) {
+		struct PathElemList *new;
+		char *name = (char*)kmalloc(count-begin+1, GFP_KERNEL);
+		for (j=0;j<count-begin; ++j) {
+			name[j] = buf[begin+j];
+		}
+		name[idx-begin] = '\0';
+		new = (struct PathElemList*)kmalloc(sizeof(struct PathElemList), GFP_KERNEL);
+		new->e.is_ref = 0;
+		new->e.name = name;
+		new->next = list;
+		list = new;
+		++len;
+	}
+	elems = (struct PathElem*)kmalloc(len*sizeof(struct PathElem), GFP_KERNEL);
+	for (j=0; j<len; ++j) {
+		elems[len-j-1] = list->e;
+		list = list->next;
+	}
+	path_buf->len = len;
+	path_buf->path = elems;
+	return 1;
+}
+
+int str_same(char *a, char *b) {
+	int idx = 0;
+	for (;;) {
+		if (a[idx] == '\0' && b[idx] == '\0') {
+			return 1;
+		}
+		if (a[idx] !=  b[idx]) {
+			return 0;
+		}
+		++idx;
+	}
+}
+
+int str_len(char* a) {
+	int idx=0;
+	while (a[idx++] != '\0') {}
+	return idx;
+}
+
+struct JsonValue *get_value(struct JsonValue *json, struct PathElem *path, int len);
+
+char* resolve_path_elem(struct JsonValue *json, struct PathElem path) {
+	if (path.is_ref) {
+		struct JsonValue* s;
+		if (path.path.len <= 0) return NULL;
+		s = get_value(json, path.path.path, path.path.len);
+		if (s == NULL || s->type != STRING) return NULL;
+		return s->string.buf;
+	}
+	else {
+		return path.name;
+	}
+}
+
+struct JsonValue *get_value_sys_time(int len) {
+	struct JsonValue *time;
+	ktime_t sys_time = ktime_get();
+	if (len != 0) return NULL;
+	time = (struct JsonValue*)kmalloc(sizeof(struct JsonValue), GFP_KERNEL);
+	time->type = INTEGER;
+	time->integer = (int)sys_time;
+	return NULL;
+}
+
+struct JsonValue *access(struct JsonValue *json, char* buf) {
+	int i;
+	for (i=0; i<json->pairs.len; ++i) {
+		if (str_same(json->pairs.pairs[i].key, buf)) {
+			return &json->pairs.pairs[i].value;
+		}
+	}
+	return NULL;
+}
+
+struct JsonValue *get_out_value(struct JsonValue *json, struct PathElem *path, int len, int create_elems) {
+	char *head;
+	int head_len;
+	char *key_buf;
+	int i;
+	struct JsonValue value;
+	if (len <= 0) return json;
+	head = resolve_path_elem(json, *path);
+	if (head == NULL) return NULL;
+	if (json->type != OBJECT) return NULL;
+	for (i=0; i<json->pairs.len; ++i) {
+		if (str_same(json->pairs.pairs[i].key, head)) {
+			return get_out_value(&json->pairs.pairs[i].value, path+1, len-1, create_elems);
+		}
+	}
+	if (!create_elems) return NULL;
+	if (json->pairs.len+1 > json->pairs.mem_len) {
+		int i;
+		struct Pair *pairs = (struct Pair*)kmalloc(sizeof(struct Pair)*json->pairs.mem_len*2+1, GFP_KERNEL);
+		if (pairs == NULL) return NULL;
+		for (i=0; i<json->pairs.len; ++i) {
+			pairs[i] = json->pairs.pairs[i];
+		}
+		if(json->pairs.mem_len > 0)
+			kfree(json->pairs.pairs);
+		json->pairs.pairs = pairs;
+		json->pairs.mem_len = json->pairs.mem_len*2+1;
+	}
+	value.type = OBJECT;
+	value.pairs.pairs = (struct Pair*)kmalloc(sizeof(struct Pair), GFP_KERNEL);
+	value.pairs.len = 0;
+	value.pairs.mem_len = 0;
+
+	head_len = str_len(head);
+	key_buf = (char*)kmalloc(head_len, GFP_KERNEL);
+	for (i = 0; i<head_len; ++i) {
+		key_buf[i] = head[i];
+	}
+	json->pairs.pairs[json->pairs.len].key = key_buf;
+	json->pairs.pairs[json->pairs.len].value = value;
+	json->pairs.len++;
+	return get_out_value(&json->pairs.pairs[json->pairs.len-1].value, path+1, len-1, create_elems);
+}
+
+struct JsonValue* get_value_sys(struct JsonValue *json, struct PathElem *path, int len) {
+	char *head;
+	if (len <= 0) return NULL;
+	head = resolve_path_elem(json, *path);
+	if (head == NULL) return NULL;
+	if (str_same(head, "time"))
+		return get_value_sys_time(len-1);
+	return NULL;
+}
+
+struct JsonValue* get_value(struct JsonValue *json, struct PathElem *path, int len) {
+	char *head;
+	if (len <= 0) return NULL;
+	head = resolve_path_elem(json, *path);
+	if (head == NULL)
+	if (head == NULL) return NULL;
+	if (str_same(head, "out"))
+		return get_out_value(json, path+1, len-1, 0);
+	if (str_same(head, "sys"))
+		return get_value_sys(json, path+1, len-1);
+	return NULL;
+}
+
+void sweep(struct JsonValue *json) {
+	int i;
+	switch (json->type) {
+		case INTEGER:
+			return;
+		case BOOLEAN:
+			return;
+		case STRING:
+			return;
+		case OBJECT:
+			for (i=0; i<json->pairs.len; ++i) {
+				kfree(json->pairs.pairs[i].key);
+				sweep(&json->pairs.pairs[i].value);
+			}
+			return;
+		case ARRAY:
+			for (i=0; i<json->arrary.len; ++i) {
+				sweep(json->arrary.arr + i);
+			}
+			return;
+	}
+}
+
+struct JsonValue* eval(struct JsonValue* out, struct JsonValue *root) {
+	if (root->type == OBJECT) {
+		struct JsonValue *type = access(root, "type");
+		if (type == NULL || type->type != STRING) return NULL;
+		if (str_same(type->string.buf, "op")) {
+			struct JsonValue *op = access(root, "op");
+			struct JsonValue *lhr, *rhr;
+			if (op == NULL || op->type != STRING) return NULL;
+
+			lhr = access(root, "lhr");
+			if (lhr == NULL) return NULL;
+
+			rhr = access(root, "rhr");
+			if (rhr == NULL) return NULL;
+
+			if (str_same(op->string.buf, "sub")) {
+				struct JsonValue *lhr_evaluated = eval(out, lhr);
+				struct JsonValue *rhr_evaluated = eval(out, rhr);
+				struct JsonValue *json;
+				if (lhr_evaluated == NULL ||
+					lhr_evaluated->type != INTEGER ||
+					rhr_evaluated == NULL ||
+					rhr_evaluated->type != INTEGER)
+					return NULL;
+				json = (struct JsonValue*)kmalloc(sizeof(struct JsonValue), GFP_KERNEL);
+				json->type = INTEGER;
+				json->integer = lhr_evaluated->integer - rhr_evaluated->integer;
+				return json;
+			}
+		}
+		else if (str_same(type->string.buf, "ref")) {
+			struct JsonValue *name = access(root, "name");
+			struct Path path;
+			if (name == NULL || name->type != STRING) return NULL;
+			if (!parse_path(&path, name->string.buf, name->string.len))
+				return NULL;
+			return get_value(out, path.path, path.len);
+		}
+	}
+	return root;
+}
+
+int exec(struct JsonValue* out, struct JsonValue *json) {
+	struct JsonValue *type = access(json, "type");
+	if (type == NULL || type->type != STRING) return 0;
+	if (str_same(type->string.buf, "assign")) {
+		struct JsonValue *target = access(json, "target");
+		struct JsonValue *value = access(json, "value");
+		struct JsonValue *target_ptr, *json;
+		struct Path path;
+		if (value == NULL || target == NULL || target->type != STRING) return 0;
+		if (!parse_path(&path, target->string.buf, target->string.len))
+			return 0;
+		if (path.len == 0 || path.path->is_ref || !str_same(path.path->name, "out")) return 0;
+		target_ptr = get_out_value(out, path.path+1, path.len-1, 1);
+		if (target_ptr == NULL) return 0;
+		sweep(target_ptr);
+		json = eval(out, value);
+		if (json == NULL) return 0;
+		*target_ptr = *json;
+		sweep(json);
+		return 1;
+	}
+	return 0;
+}
+
+int set_hook(struct JsonValue* out, struct JsonValue* json) {
+	return 0;
+}
+
+int load(struct JsonValue* out, struct JsonValue *json) {
+	struct JsonValue *type = access(json, "type");
+	if (type == NULL || type->type != STRING) return 0;
+	if (str_same(type->string.buf, "probe")) {
+		struct JsonValue *hooks = access(json, "hooks");
+		int i;
+		if (type == NULL || hooks->type != ARRAY) return 0;
+		for (i=0; i<hooks->arrary.len; ++i) {
+			if (!set_hook(out, &hooks->arrary.arr[i]))
+				return 0;
+		}
+		return 1;
+	}
+	return 0;
+}
+
+
+extern void *syscall_table[];
+asmlinkage long (*orig_read)(int magic1, int magic2, unsigned int cmd, void __user *arg);
+asmlinkage long syscall_replace_read(int magic1, int magic2, unsigned int cmd, void __user *arg) {
+	if (read_hook != NULL) {
+		exec(out, read_hook);
+	}
+	return (*orig_read)(magic1, magic2, cmd, arg);
+}
+
+static void save_original_syscall_address(void) {
+	pr_info("read original address 0x%p + 0x%d\n", syscall_table, __NR_read);
+	orig_read = syscall_table[__NR_read];
+}
+
+static void change_page_attr_to_rw(pte_t *pte) {
+	set_pte_atomic(pte, pte_mkwrite(*pte));
+}
+
+static void change_page_attr_to_ro(pte_t *pte) {
+	set_pte_atomic(pte, pte_clear_flags(*pte, _PAGE_RW));
+}
+
+static void replace_syscall(void *new) {
+	unsigned int level = 0;
+	pte_t *pte;
+	pte = lookup_address((unsigned long) syscall_table, &level);
+	change_page_attr_to_rw(pte);
+	syscall_table[__NR_read] = syscall_replace_read;
+	change_page_attr_to_ro(pte);
+}
+
+static int syscall_replace_init(void) {
+	pr_info("sys_call_table address is 0x%p\n", syscall_table);
+	save_original_syscall_address();
+	replace_syscall(syscall_replace_read);
+	pr_info("system call replaced\n");
+	return 0;
+}
+
+static void syscall_replace_cleanup(void) {
+	pr_info("cleanup");
+	if (orig_read)
+		replace_syscall(orig_read);
+}
+
+char srcbuf[1024];
+size_t len;
+
+struct runtime_info_t {
+	struct JsonValue json;
+};
+
+static int lambda_open(struct inode *inode, struct file *file) {
+	struct runtime_info_t *info = kmalloc(sizeof(struct runtime_info_t), GFP_KERNEL);
+	printk("lambda open\n");
+	file->private_data = (void*)info;
+	return 0;
+}
+
+static int lambda_release(struct inode *inode, struct file *file) {
+	printk("lambda close\n");
+	return 0;
+}
+
+static ssize_t lambda_write(struct file *file, const char __user *buf, size_t count , loff_t *f_pos) {
+	struct runtime_info_t *info = file->private_data;
+	int i;
+	ParseResult result;
+	if (!access_ok(buf, count)) {
+		return 0;
+	}
+	char* kern_buf = (char*)kmalloc(count, GFP_KERNEL);
+	for (i=0; i<count; ++i) {
+		kern_buf = buf[i];
+	}
+	result = parse(kern_buf, count);
+	if (result.type != SUCCESS) {
+		return 0;
+	}
+	printk("parse success %d\n", result.value.type);
+	info->json = result.value;
+	return count;
+}
+
+static ssize_t lambda_read(struct file *file, char __user *buf, size_t count, loff_t *f_pos) {
+	struct runtime_info_t *info = file->private_data;
+	long long len;
+	int i;
+	if (!access_ok(buf, count)) {
+		return 0;
+	}
+	char* kern_buf = (char*)kmalloc(count, GFP_KERNEL);
+	len = stringify(kern_buf, count, info->json);
+	for (i=0; i<count; ++u) {
+		buf[i] = kern_buf[i];
+	}
+	if (len < 0) return 0;
+	return 0;
+}
+
+struct file_operations s_lambda_fops = {
+	.open		= lambda_open,
+	.release	= lambda_release,
+	.read		= lambda_read,
+	.write		= lambda_write,
+};
+
+static int lambda_init(void) {
+	printk("Hello lambda\n");
+	register_chrdev(DRIVER_MEJOR, DRIVER_NAME, &s_lambda_fops);
+	syscall_replace_init();
+	return 0;
+}
+
+static void lambda_exit(void) {
+	printk("Goodbye lambda\n");
+	syscall_replace_cleanup();
+	unregister_chrdev(DRIVER_MEJOR, DRIVER_NAME);
+}
+
+module_init(lambda_init);
+module_exit(lambda_exit);
+
+MODULE_DESCRIPTION("lambda");
+MODULE_AUTHOR("namachan10777");
+MODULE_LICENSE("GPL");
+
+
diff --git a/drivers/lambda/lambda.h b/drivers/lambda/lambda.h
new file mode 100644
index 000000000000..f4e83262b38d
--- /dev/null
+++ b/drivers/lambda/lambda.h
@@ -0,0 +1,63 @@
+typedef enum {
+	STRING,
+	INTEGER,
+	BOOLEAN,
+	OBJECT,
+	ARRAY
+} JSONType;
+
+typedef struct JsonValue JSONValue;
+typedef struct Pair PAIR;
+
+struct String {
+	char *buf;
+	int len;
+};
+
+typedef struct {
+	int len;
+	struct JsonValue *arr;
+} Array;
+
+struct Pairs {
+	int len;
+	int mem_len;
+	struct Pair *pairs;
+};
+
+struct JsonValue {
+	JSONType type;
+	union {
+		struct String string;
+		int integer;
+		int boolean;
+		struct Pairs pairs;
+		Array arrary;
+	};
+};
+
+struct Pair {
+	char *key;
+	struct JsonValue value;
+};
+
+typedef enum {
+	SUCCESS,
+	ERROR
+} ParseResultType;
+
+typedef struct {
+	ParseResultType type;
+	int used;
+	union {
+		int pos;
+		struct JsonValue value;
+	};
+} ParseResult;
+
+ParseResult parse(const char *input, int count);
+int stringify(char *buf, int buf_size, JSONValue json);
+
+struct JsonValue* eval(struct JsonValue *out, struct JsonValue *json);
+int exec(struct JsonValue* out, struct JsonValue *json);
+struct JsonValue* empty_object(void);
diff --git a/drivers/lambda/probe.json b/drivers/lambda/probe.json
new file mode 100644
index 000000000000..5ec3da281708
--- /dev/null
+++ b/drivers/lambda/probe.json
@@ -0,0 +1,32 @@
+{
+	"type": "probe",
+	"hooks": [
+		{
+			"target": "hook.syscall.read.begin",
+			"exec": {
+				"type": "assign",
+				"target": "value.out[value.sys.syscall.read.caller]",
+				"value": "value.sys.time"
+			}
+		},
+		{
+			"target": "hook.syscall.read.end",
+			"exec": {
+				"type": "assign",
+				"target": "value.out[value.sys.syscall.read.caller]",
+				"value": {
+					"type": "op",
+					"op": "sub",
+					"lhr": {
+						"type": "ref",
+						"name": "value.out[value.sys.syscall.read.caller]"
+					},
+					"rhr": {
+						"type": "ref",
+						"name": "value.sys.time"
+					}
+				}
+			}
+		}
+	]
+}
diff --git a/drivers/unrandom/Kconfig b/drivers/unrandom/Kconfig
new file mode 100644
index 000000000000..eee631987fb8
--- /dev/null
+++ b/drivers/unrandom/Kconfig
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# FPGA framework configuration
+#
+
+menuconfig UNRANDOM
+	tristate "Unrandom seed"
+	help
+	  unrandom seed generator
diff --git a/drivers/unrandom/Makefile b/drivers/unrandom/Makefile
new file mode 100644
index 000000000000..e0e027b12e2e
--- /dev/null
+++ b/drivers/unrandom/Makefile
@@ -0,0 +1,6 @@
+#
+# Makefile for the kernel land lambda calcuration
+#
+
+# Lambda
+obj-$(CONFIG_UNRANDOM)			+= unrandom.o
diff --git a/drivers/unrandom/unrandom.c b/drivers/unrandom/unrandom.c
new file mode 100644
index 000000000000..f94962dedbbe
--- /dev/null
+++ b/drivers/unrandom/unrandom.c
@@ -0,0 +1,77 @@
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include <linux/slab.h>
+
+#define DRIVER_MEJOR 64
+#define DRIVER_NAME "unrandom"
+
+char srcbuf[1024];
+size_t len;
+
+struct runtime_info_t {
+	char *srcbuf;
+	size_t bufsize;
+};
+
+static int lambda_open(struct inode *inode, struct file *file) {
+	char *srcbuf = kmalloc(sizeof(char) * 1024, GFP_KERNEL);
+	struct runtime_info_t *info = kmalloc(sizeof(struct runtime_info_t), GFP_KERNEL);
+	info->srcbuf = srcbuf;
+	file->private_data = (void*)info;
+	return 0;
+}
+
+static int lambda_release(struct inode *inode, struct file *file) {
+	return 0;
+}
+
+static ssize_t lambda_write(struct file *file, const char __user *buf, size_t count , loff_t *f_pos) {
+	printk("Write unrandom\n");
+	size_t i;
+	struct runtime_info_t *info = file->private_data;
+	if (!access_ok(buf, count)) {
+		return 0;
+	}
+	if (count > 1024)
+		count = 1024;
+	for (i=0; i<count; ++i) {
+		info->srcbuf[i] = buf[i];
+	}
+	info->bufsize = count;
+	return count;
+}
+
+static ssize_t lambda_read(struct file *file, char __user *buf, size_t count, loff_t *f_pos) {
+	printk("Read unrandom\n");
+	size_t i;
+	struct runtime_info_t *info = file->private_data;
+	if (!access_ok(buf, count)) {
+		return 0;
+	}
+	for (i=0; i<count && *f_pos < info->bufsize; ++i) {
+		buf[i] = info->srcbuf[(*f_pos)++];
+	}
+	return info->bufsize - *f_pos;
+}
+
+struct file_operations s_lambda_fops = {
+	.open		= lambda_open,
+	.release	= lambda_release,
+	.read		= lambda_read,
+	.write		= lambda_write,
+};
+
+static int lambda_init(void) {
+	printk("Hello unrandom\n");
+	register_chrdev(DRIVER_MEJOR, DRIVER_NAME, &s_lambda_fops);
+	return 0;
+}
+
+static void lambda_exit(void) {
+	printk("Goodbye unrandom\n");
+	unregister_chrdev(DRIVER_MEJOR, DRIVER_NAME);
+}
+
+module_init(lambda_init);
+module_exit(lambda_exit);
diff --git a/fs/read_write.c b/fs/read_write.c
index bbfa9b12b15e..f4dd91652f55 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -593,9 +593,17 @@ ssize_t ksys_read(unsigned int fd, char __user *buf, size_t count)
 	return ret;
 }
 
+void (*read_hooks[2])(void) = {NULL};
+EXPORT_SYMBOL(read_hooks);
 SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
 {
-	return ksys_read(fd, buf, count);
+	unsigned long ret;
+	if (read_hooks[0] != NULL)
+		read_hooks[1]();
+	ret = ksys_read(fd, buf, count);
+	if (read_hooks[1] != NULL)
+		read_hooks[1]();
+	return ret;
 }
 
 ssize_t ksys_write(unsigned int fd, const char __user *buf, size_t count)
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 1815065d52f3..2b926ee3626a 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1003,7 +1003,7 @@ asmlinkage long sys_pidfd_send_signal(int pidfd, int sig,
 				       siginfo_t __user *info,
 				       unsigned int flags);
 asmlinkage long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);
-
+asmlinkage long sys_caesar_encrypt(unsigned int shift, char __user *buf, size_t count);
 /*
  * Architecture-specific system calls
  */
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 3a3201e4618e..540412fc4bc3 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -855,9 +855,11 @@ __SYSCALL(__NR_clone3, sys_clone3)
 __SYSCALL(__NR_openat2, sys_openat2)
 #define __NR_pidfd_getfd 438
 __SYSCALL(__NR_pidfd_getfd, sys_pidfd_getfd)
+#define __NR_caesar_encrypt 439
+__SYSCALL(__NR_caesar_encrypt, sys_caesar_encrypt)
 
 #undef __NR_syscalls
-#define __NR_syscalls 439
+#define __NR_syscalls 440
 
 /*
  * 32 bit systems traditionally used different
diff --git a/tools/include/uapi/asm-generic/unistd.h b/tools/include/uapi/asm-generic/unistd.h
index 3a3201e4618e..540412fc4bc3 100644
--- a/tools/include/uapi/asm-generic/unistd.h
+++ b/tools/include/uapi/asm-generic/unistd.h
@@ -855,9 +855,11 @@ __SYSCALL(__NR_clone3, sys_clone3)
 __SYSCALL(__NR_openat2, sys_openat2)
 #define __NR_pidfd_getfd 438
 __SYSCALL(__NR_pidfd_getfd, sys_pidfd_getfd)
+#define __NR_caesar_encrypt 439
+__SYSCALL(__NR_caesar_encrypt, sys_caesar_encrypt)
 
 #undef __NR_syscalls
-#define __NR_syscalls 439
+#define __NR_syscalls 440
 
 /*
  * 32 bit systems traditionally used different
diff --git a/toy/Makefile b/toy/Makefile
new file mode 100644
index 000000000000..8337139179ae
--- /dev/null
+++ b/toy/Makefile
@@ -0,0 +1 @@
+obj-y := toy.o
diff --git a/toy/toy.c b/toy/toy.c
new file mode 100644
index 000000000000..b37b32ded17d
--- /dev/null
+++ b/toy/toy.c
@@ -0,0 +1,44 @@
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>
+#include <linux/vmalloc.h>
+
+SYSCALL_DEFINE3(caesar_encrypt, unsigned int, shift, unsigned char __user *, userbuf, size_t, count) {
+	size_t i;
+	unsigned char *buf;
+	long copied_count, failed_to_return_count;
+
+	if (!access_ok(userbuf, count)) {
+		return EFAULT;
+	}
+	buf = kmalloc(sizeof(unsigned char) * count, GFP_KERNEL);
+	copied_count = strncpy_from_user(buf, userbuf, count);
+	if (copied_count < 0) {
+		printk ("[ caesar_encrypt ] COPY ERROR \n");
+		kfree(buf);
+		return EFAULT;
+	}
+	for (i=0; i<count; ++i) {
+		unsigned char c = buf[i];
+		if (c >= 0x41 && c <= 0x5a) {
+			buf[i] = ((c - 0x41 + shift) % 27) + 0x41;
+		}
+		else if (c >= 0x61 && c <= 0x7a) {
+			buf[i] = ((c - 0x61 + shift) % 27) + 0x61;
+		}
+		else if (c == 0) {
+			break;
+		}
+		else if (c > 0x7f) {
+			return EINVAL;
+		}
+	}
+
+	failed_to_return_count = copy_to_user(userbuf, buf, sizeof(unsigned char) * copied_count);
+	if (failed_to_return_count != 0) {
+		kfree(buf);
+		printk ("[ caesar_encrypt ] COPY ERROR \n");
+		printk ("[ caesar_encrypt ] bytes failed to return : %ld\n", failed_to_return_count);
+		return EFAULT;
+	}
+	return 0;
+}
